version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather-api
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: weather-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: weather-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: weather-kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  db:
    image: postgres:latest
    container_name: weather-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPORT: ${DB_PORT}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}

  redis:
    image: redis:7-alpine
    container_name: weather-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: weather-redis-exporter
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-}"
    depends_on:
      redis:
        condition: service_healthy
    restart: ${CONTAINER_RESTART_POLICY:-unless-stopped}

  prometheus:
    image: prom/prometheus:latest
    container_name: weather-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-200h}'
      - '--web.enable-lifecycle'
    depends_on:
      - redis-exporter
    restart: ${CONTAINER_RESTART_POLICY:-unless-stopped}

  grafana:
    image: grafana/grafana:latest
    container_name: weather-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: ${CONTAINER_RESTART_POLICY:-unless-stopped}

  # migrate:
  #   image: migrate/migrate
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./migrations/:/migrations
  #   command: ["-path", "/migrations/", "-database", "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable", "up"]

volumes:
  pgdata:
  redisdata:
  prometheus_data:
  grafana_data: